# -*- coding: utf-8 -*-
# Generated by Django 1.9.7 on 2016-07-07 15:30
from __future__ import unicode_literals

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import mptt.fields


# Functions from the following migrations need manual copying.
# Move them and any dependencies into this file, then update the
# RunPython operations to refer to the local versions:
# neutron.migrations.0017_auto_20160707_1727


def load_regions_from_fixture(apps, schema_editor):
    from django.core.management import call_command
    call_command("loaddata", "regions")


class Migration(migrations.Migration):

    replaces = [('neutron', '0001_initial'), ('neutron', '0002_remove_meaning_source'), ('neutron', '0003_auto_20160322_1619'), ('neutron', '0004_meaning_order'), ('neutron', '0005_auto_20160322_1719'), ('neutron', '0006_informer_searchable'), ('neutron', '0007_auto_20160522_1845'), ('neutron', '0008_auto_20160522_1853'), ('neutron', '0009_auto_20160522_1901'), ('neutron', '0010_auto_20160522_1927'), ('neutron', '0011_auto_20160523_2021'), ('neutron', '0012_remove_informer_nationality'), ('neutron', '0013_auto_20160610_1500'), ('neutron', '0014_auto_20160610_1902'), ('neutron', '0015_auto_20160613_0833'), ('neutron', '0016_auto_20160702_1114'), ('neutron', '0017_auto_20160707_1727')]

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Context',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('word_pos', models.IntegerField()),
                ('text', models.TextField()),
            ],
            options={
                'verbose_name': 'Context',
                'verbose_name_plural': 'Contexts',
            },
        ),
        migrations.CreateModel(
            name='Datum',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Datum',
                'verbose_name_plural': 'Data',
            },
        ),
        migrations.CreateModel(
            name='Definition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('definition', models.TextField(help_text='Text of the definition itself')),
            ],
            options={
                'verbose_name': 'Definition',
                'verbose_name_plural': 'Definitions',
            },
        ),
        migrations.CreateModel(
            name='Informer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64)),
                ('comment', models.TextField()),
                ('confidence', models.FloatField(blank=True, help_text='Confidence level for this informer for data in this region', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('mutable', models.BooleanField(default=True, help_text='Whether confidence attribute can be automatically reevaluated')),
            ],
            options={
                'verbose_name': 'Informer',
                'verbose_name_plural': 'Informers',
            },
        ),
        migrations.CreateModel(
            name='Interface',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Identifier of the interface', max_length=64)),
            ],
            options={
                'verbose_name': 'Interface',
                'verbose_name_plural': 'Interfaces',
            },
        ),
        migrations.CreateModel(
            name='Meaning',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source', models.IntegerField(choices=[(0, 'Initial data from dictionaries'), (1, 'Data provided from actual informers'), (2, 'Invalid meanings just to catch cheaters')])),
                ('definition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='neutron.Definition')),
                ('informer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='neutron.Informer')),
            ],
            options={
                'verbose_name': 'Meaning',
                'verbose_name_plural': 'Meanings',
            },
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the region', max_length=255, unique=True)),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(db_index=True, editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='neutron.Region')),
            ],
            options={
                'verbose_name': 'Region',
                'verbose_name_plural': 'Regions',
            },
            managers=[
                ('_default_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Word',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('word', models.CharField(db_index=True, max_length=64)),
            ],
            options={
                'verbose_name': 'Word',
                'verbose_name_plural': 'Words',
            },
        ),
        migrations.CreateModel(
            name='CoarseWord',
            fields=[
                ('datum_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='neutron.Datum')),
                ('value', models.BooleanField(help_text='Checked if the word has been marked as coarse.')),
                ('word', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='neutron.Word')),
            ],
            options={
                'verbose_name': 'Coarse word',
                'verbose_name_plural': 'Coarse words',
            },
            bases=('neutron.datum',),
        ),
        migrations.CreateModel(
            name='WordUse',
            fields=[
                ('datum_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='neutron.Datum')),
                ('use', models.IntegerField(choices=[(0, 'Use this word with this meaning'), (1, 'Prefer another word for this definition'), (2, 'Do not recognize this meaning for this word')])),
            ],
            options={
                'verbose_name': 'Word use',
                'verbose_name_plural': 'Words uses',
            },
            bases=('neutron.datum',),
        ),
        migrations.AddField(
            model_name='meaning',
            name='word',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='neutron.Word'),
        ),
        migrations.AddField(
            model_name='informer',
            name='region',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='neutron.Region'),
        ),
        migrations.AddField(
            model_name='informer',
            name='user',
            field=models.ForeignKey(blank=True, help_text='Informers may or may not be users in the webapp', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='datum',
            name='informer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='neutron.Informer'),
        ),
        migrations.AddField(
            model_name='datum',
            name='interface',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='neutron.Interface'),
        ),
        migrations.AddField(
            model_name='context',
            name='meaning',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='neutron.Meaning'),
        ),
        migrations.AddField(
            model_name='worduse',
            name='meaning',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='neutron.Meaning'),
        ),
        migrations.RemoveField(
            model_name='meaning',
            name='source',
        ),
        migrations.AddField(
            model_name='informer',
            name='privacy',
            field=models.IntegerField(choices=[(0, 'Public'), (1, 'Friends'), (2, 'Private')], default=0, help_text='Define who can see this information: public (everyone), friends (only users registered), private (nobody, just in database dumps).'),
        ),
        migrations.AddField(
            model_name='meaning',
            name='is_locution',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='meaning',
            name='type',
            field=models.IntegerField(choices=[(0, 'Definition'), (1, 'Reference (remisi\xf3n)')], default=0),
        ),
        migrations.AddField(
            model_name='meaning',
            name='order',
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='context',
            name='word_pos',
            field=models.IntegerField(default=-1),
        ),
        migrations.AddField(
            model_name='informer',
            name='searchable',
            field=models.BooleanField(default=False, help_text='Whether the words related to this informer are included in the search-form.'),
        ),
        migrations.AddField(
            model_name='informer',
            name='education',
            field=models.CharField(blank=True, help_text='Educational level', max_length=128, null=True),
        ),
        migrations.AddField(
            model_name='informer',
            name='known_us',
            field=models.CharField(blank=True, help_text='How did he know about us', max_length=512, null=True),
        ),
        migrations.AlterField(
            model_name='informer',
            name='name',
            field=models.CharField(help_text='Informer name', max_length=64),
        ),
        migrations.AlterField(
            model_name='informer',
            name='name',
            field=models.CharField(help_text='Informer identifier', max_length=64),
        ),
        migrations.AlterModelManagers(
            name='region',
            managers=[
            ],
        ),
        migrations.CreateModel(
            name='WordAlternate',
            fields=[
                ('datum_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='neutron.Datum')),
            ],
            options={
                'verbose_name': 'Word alternate',
                'verbose_name_plural': 'Word alternates',
            },
            bases=('neutron.datum',),
        ),
        migrations.AddField(
            model_name='datum',
            name='elapsed_time',
            field=models.FloatField(blank=True, help_text='Number of seconds for the user to answer the given question.', null=True),
        ),
        migrations.AddField(
            model_name='meaning',
            name='excluded',
            field=models.BooleanField(default=False, help_text="If set, this meaning won't be shown to informers in WordUse and WordAlternate interfaces"),
        ),
        migrations.AddField(
            model_name='word',
            name='excluded',
            field=models.BooleanField(default=False, help_text="If set, this word won't be shown to informers in WordCoarse interface"),
        ),
        migrations.RenameField(
            model_name='worduse',
            old_name='use',
            new_name='value',
        ),
        migrations.AlterField(
            model_name='worduse',
            name='value',
            field=models.IntegerField(choices=[(0, 'Ok'), (1, "I don't use it, but I have heard it"), (1, 'Neither use it, nor heard it before'), (2, 'Do not recognize this meaning for this word')]),
        ),
        migrations.AddField(
            model_name='wordalternate',
            name='value',
            field=models.ForeignKey(blank=True, help_text="Alternate word/definition in the informer's dictionary", null=True, on_delete=django.db.models.deletion.CASCADE, related_name='alternate_set', to='neutron.Meaning'),
        ),
        migrations.AddField(
            model_name='wordalternate',
            name='meaning',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='neutron.Meaning'),
        ),
        migrations.AlterField(
            model_name='worduse',
            name='value',
            field=models.IntegerField(choices=[(0, 'Ok'), (1, "I don't use it, but I have heard it"), (2, 'Neither use it, nor heard it before'), (3, 'Do not recognize this meaning for this word')]),
        ),
        migrations.RunPython(
            code=load_regions_from_fixture,
        ),
    ]
